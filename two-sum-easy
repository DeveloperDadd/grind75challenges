/*
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 */

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */

// BRUTEFORCE:
var twoSum = function(nums, target) {
    for (let i = 0; i < nums.length; i++) {
        for (let j = i + 1; j < nums.length; j++)
            if (nums[i] + nums[j] === target) {
                return [i, j];
            }
    }
};

// O(n):

var twoSum = function(nums, target) {
  // Create an empty object to store previously seen numbers and their indices.
  const previousValues = {};
  // Loop through each element in the `nums` array.
  for (let i = 0; i < nums.length; i++) {
    // Get the current number from the array.
    const currentNumber = nums[i];
    // Calculate the "needed value" which is the difference between the target and the current number.
    const neededValue = target - currentNumber;
    // Check if the "needed value" already exists in the `previousValues` object.
    const index2 = previousValues[neededValue];
    // If the "needed value" is found:
    if (index2 != null) {
      // Return an array containing the indices of the two numbers that add up to the target.
      return [index2, i];
    } else {
      // If the "needed value" is not found, store the current number and its index in the `previousValues` object.
      previousValues[currentNumber] = i;
    }
  }
  // If no pair of numbers adds up to the target, return undefined.
  return undefined;
};
